<template>
    <div class="bk_ud_p">
        <header>
            请上传本人手持身份证（正反面）及银行卡的照片，证件上的信息无遮挡，清晰可见。
            <router-link to="/"> 查看示例>></router-link>
        </header>

        <div v-for="(item,index) of data">
            <div class="defaultImg">
                <div class="upload_photos" :style="{'backgroundImage':'url('+item.bg+')'}">
                    <input type="file" class="upload_input" accept="image/png,image/jpeg" @change="getFile($event,index)">
                    <p class="text">{{item.text}}</p>
                    <div class="progress" v-show="item.showProgress">
                        <p>{{item.progress}}</p>
                    </div>
                </div>
            </div>
            <div class="middle_white"></div>
        </div>

        <Button @click.native='Submission' :style="{marginTop:0}">
            下一步
        </Button>
        <div class="middle_white"></div>
        <div class="middle_white"></div>
        <div class="popup" v-show="showPopup">
            <div class="popup_main">
                <p class="header">
                    <b>提示</b>
                </p>
                <p class="tips">确定提交以上信息申请解绑银行卡？</p>
                <div class="button_wrap">
                    <p class="cancel" @click="showPopup = false">取消</p>
                    <p class="confirm" @click="confirm">确定</p>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import reset_rem from "../../../assets/js/wechat/reset_rem.js";
import { usernameKey, authKey, authName } from "@/config/config.js";
import {
    getCookie,
    getoriginal,
    decryptByDES,
    uncompile
} from "@/config/common.js";
export default {
    data() {
        return {
            showPopup: false,
            data: [
                {
                    bg: "",
                    text: "手持身份证正面",
                    showProgress: false,
                    progress: "0%"
                },
                {
                    bg: "",
                    text: "手持身份证反面",
                    showProgress: false,
                    progress: "0%"
                },
                {
                    bg: "",
                    text: "手持银行卡卡号面",
                    showProgress: false,
                    progress: "0%"
                }
            ],
            imgData: {
                imgUrlOne: "",
                imgUrlTwo: "",
                imgUrlThree: ""
            }
        };
    },
    created: function() {},
    methods: {
        confirm() {
            // console.log(imgData)
            this.$http
                .post("/Product/User/applyUnbind", {
                    parameters: JSON.stringify(this.imgData)
                })
                .then(res => {
                    if (res.data.end == "ok") {
                        alert("处理中");
                        this.$router.push({
                            path: "/wechat/subpage/my_bankcard"
                        });
                    } else {
                        this.$Toast(res.data.message);
                    }
                })
                .catch(err => {
                    console.log(err);
                });
        },
        // 文件压缩：
        photoCompress(file, w, objDiv) {
            let self = this;
            var ready = new FileReader();
            /*开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,
            readyState属性的值会成为DONE,如果设置了onloadend事件处理程序
            ,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.*/
            ready.readAsDataURL(file);
            ready.onload = function() {
                var re = this.result;
                console.log(re);
                self.canvasDataURL(re, w, objDiv);
            };
        },
        canvasDataURL(path, obj, callback) {
            var img = new Image();
            img.src = path;
            img.onload = function() {
                var that = this;
                // 默认按比例压缩
                var w = that.width,
                    h = that.height,
                    scale = w / h;
                w = obj.width || w;
                h = obj.height || w / scale;
                var quality = 0.6; // 默认图片质量为0.7
                //生成canvas
                var canvas = document.createElement("canvas");
                var ctx = canvas.getContext("2d");
                // 创建属性节点
                var anw = document.createAttribute("width");
                anw.nodeValue = w;
                var anh = document.createAttribute("height");
                anh.nodeValue = h;
                canvas.setAttributeNode(anw);
                canvas.setAttributeNode(anh);
                ctx.drawImage(that, 0, 0, w, h);
                // 图像质量
                if (obj.quality && obj.quality <= 1 && obj.quality > 0) {
                    quality = obj.quality;
                }
                // quality值越小，所绘制出的图像越模糊
                var base64 = canvas.toDataURL("image/jpeg", quality);
                // 回调函数返回base64的值
                callback(base64);
            };
        },
        /**
         * 将以base64的图片url数据转换为Blob
         * @param urlData
         *            用url方式表示的base64图片数据
         */
        convertBase64UrlToBlob(urlData) {
            var arr = urlData.split(","),
                mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new Blob([u8arr], { type: mime });
        },
        // 文件压缩
        getFile(event, type) {
            var _this = this;
            let fileObj = event.target.files[0];
            if (fileObj.size / 1024 / 1024 > 5) {
                _this.$Toast("上传图片需小于5M");
                return;
            }
            var formData = new FormData(); // 创建form对象  s
            // formData.append("imgStr", files);
            let config = {
                headers: { "Content-Type": "multipart/form-data" }
            }; //添加请求头

            if (fileObj.size / 1024 > 500) {
                //大于1M，进行压缩上传
                _this.photoCompress(
                    fileObj,
                    {
                        quality: 0.2
                    },
                    function(base64Codes) {
                        //console.log("压缩后：" + base.length / 1024 + " " + base);
                        var bl = _this.convertBase64UrlToBlob(base64Codes);
                        formData.append(
                            "imgStr",
                            bl,
                            "file_" + Date.parse(new Date()) + ".jpg"
                        ); // 文件对象

                        _this.data.splice(type, 1, {
                            bg: "",
                            text: "",
                            showProgress: true,
                            progress: 0 + "%"
                        });
                        formData.append("type", type+1); // 第几个图片

                        _this.$http
                            .form(
                                "/Product/UploadNew/upLoadUserImgAndShowNew",
                                formData,
                                function(e) {
                                    var curr = e.loaded;
                                    var total = e.total;
                                    process = curr / total * 100;
                                    _this.data.splice(type, 1, {
                                        bg: "",
                                        text: "",
                                        showProgress: true,
                                        progress: process-10 + "%"
                                    });
                                }
                            )
                            .then(res => {
                                if (res.data.end == "ok") {
                                    // 假装进度条在动
                                    _this.data.splice(type, 1, {
                                        bg: res.data.data.userImgUrl,
                                        text: "",
                                        showProgress: true,
                                        progress: "100%"
                                    });
                                    setTimeout(() => {
                                        _this.data.splice(type, 1, {
                                            bg: res.data.data.userImgUrl,
                                            text: "",
                                            showProgress: false,
                                            progress: "100%"
                                        });
                                    }, 500);
                                    // 假装进度条在动

                                    //   判断 是哪一个文件

                                    if (type == 0) {
                                        _this.imgData.imgUrlOne =
                                            res.data.data.userImgUrl;
                                    } else if (type == 1) {
                                        _this.imgData.imgUrlTwo =
                                            res.data.data.userImgUrl;
                                    } else {
                                        _this.imgData.imgUrlThree =
                                            res.data.data.userImgUrl;
                                    }
                                } else {
                                    let message =
                                        res.data.message || "上传失败。请重试";
                                    _this.$Toast(message);
                                }
                            })
                            .catch(err => {
                                  _this.data.splice(type, 1, {
                                bg: '',
                                text: "",
                                showProgress: false,
                                progress: "0%"
                            });
                              _this.$Toast('上传失败，请重试');
                            });
                    }
                );
            } else {
                //小于等于1M 原图上传
                formData.append("imgStr", fileObj); // 文件对象
                  formData.append("type", type+1); // 文件对象

                _this.data.splice(type, 1, {
                    bg: "",
                    text: "",
                    showProgress: true,
                    progress: 0 + "%"
                });
                _this.$http
                    .form(
                        "/Product/UploadNew/upLoadUserImgAndShowNew",
                        formData,
                        function(e) {
                            var curr = e.loaded;
                            var total = e.total;
                            process = curr / total * 100;
                            _this.data.splice(type, 1, {
                                bg: "",
                                text: "",
                                showProgress: true,
                                progress: process-10 + "%"
                            });
                        }
                    )
                    .then(res => {
                        if (res.data.end == "ok") {
                            console.log(res.data);
                            _this.data.splice(type, 1, {
                                bg: res.data.data.userImgUrl,
                                text: "",
                                showProgress: true,
                                progress: "100%"
                            });

                            setTimeout(() => {
                                _this.data.splice(type, 1, {
                                    bg: res.data.data.userImgUrl,
                                    text: "",
                                    showProgress: false,
                                    progress: "100%"
                                });
                            }, 500);
                            // 假装进度条在动

                            //   判断 是哪一个文件
                            if (type == 0) {
                                _this.imgData.imgUrlOne =
                                    res.data.data.userImgUrl;
                            } else if (type == 1) {
                                _this.imgData.imgUrlTwo =
                                    res.data.data.userImgUrl;
                            } else {
                                _this.imgData.imgUrlThree =
                                    res.data.data.userImgUrl;
                            }
                        } else {
                            _this.$Toast(res.data.message);
                        }
                    })
                    .catch(err => {
                        _this.data.splice(type, 1, {
                                bg: '',
                                text: "",
                                showProgress: false,
                                progress: "0%"
                            });
                              _this.$Toast('上传失败，请重试');
                    });
            }

            // }
        },
        Submission() {
            var arr = this.data.filter(item => item.bg);
            if (arr.length == 3) {
                this.showPopup = true;
            } else {
                this.$Toast("请上传对应图片");
            }

            //  imgUrlOne	是	string	图片地址01
            // imgUrlTwo	是	string	图片地址02
            // imgUrlThree
        }
    }
};
</script>

<style lang="less" >
@import url("../../../assets/css/wechat/reset_rem.css");
.bk_ud_p {
    background: #fff;
    position: absolute;
    min-height: 100%;
    .middle_white {
        width: 100%;
        height: 2rem;
    }
    header {
        font-size: 1.3rem;
        color: #999;
        // height: 4rem;
        line-height: 1.6rem;
        padding: 2rem 2rem;
        a {
            color: #4c9fff;
        }
    }
    .upload_photos {
        position: relative;
        width: 90%;
        border: 1px solid #c5d2eb;
        border-radius: 2px;
        margin: 0 auto;
        height: 100%;
        border-radius: 7px;
        // background-image: url("../../../assets/img/wechat/product/common_icon_tianjia.png");
        // background-position: center;
        background-size: 100% 100%;
        background-repeat: no-repeat;
        .text {
            position: absolute;
            bottom: 1.2rem;
            width: 100%;
            text-align: center;
            color: #ffffff;
            font-size: 1rem;
            letter-spacing: 2px;
        }
    }
    .defaultImg {
        padding: 0.5rem 0;
        width: 54.3%;
        margin: 0 auto;
        background: #ccd8ed;

        height: 10.2rem;
        border-radius: 2px;
        background-image: url("../../../assets/img/wechat/product/common_icon_tianjia.png");
        background-position: center;
        background-size: 13%;
        background-repeat: no-repeat;
    }
    .upload_input {
        width: 100%;
        height: 100%;
        opacity: 0;
    }
    .progress {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url("../../../assets/img/wechat/product/uploadDefault.png");
        background-repeat: no-repeat;
        background-size: 100% 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        p {
            width: 4.5rem;
            height: 4.5rem;
            border-radius: 100px;
            background-color: rgba(0, 0, 0, 0.5);
            text-align: center;
            line-height: 4.5rem;
            font-size: 1.2rem;
            color: #fff;
        }
    }
    .popup {
        position: fixed;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        background-color: rgba(0, 0, 0, 0.5);
        .popup_main {
            margin-top: 70%;
            width: 70%;
            margin-left: 10%;
            text-align: center;
            background-color: #fff;
            border-radius: 20px;
            padding: 2rem 5%;
        }
        .header {
            color: #202020;
            font-size: 1.5rem;
            line-height: 2rem;
        }
        .tips {
            color: #606060;
            font-size: 1.5rem;
            padding-top: 1rem;
            line-height: 2.4;
        }
        .button_wrap {
            display: flex;
            justify-content: space-between;
            padding-top: 3rem;
            p {
                text-align: center;
                width: 40%;
                height: 3.3rem;
                line-height: 3.3rem;
                font-size: 1.2rem;
            }
            .cancel {
                border: 1px solid #a0a0a0;
                border-radius: 5px;
                color: #a0a0a0;
            }
            .confirm {
                background-color: #ff5240;
                border-radius: 5px;
                color: #ffffff;
            }
        }
    }
}
</style>